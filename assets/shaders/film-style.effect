// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  // ✅ 加入膠片風格的參數
  uniform Constants {
    float grayEffect;     // 原有黑白參數
    float time;           // 動態噪點參數（每幀更新）
    vec2 resolution;      // 用於暗角與 noise
  };

  // 噪點產生函數
  float random(vec2 co) {
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453123);
  }

  // uniform Constant {
  //   float grayEffect; // 0.0 = 彩色, 1.0 = 黑白
  // };

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      
      // ======= ✅ 膠片風格處理 =======

      // 1. 色調偏移：模擬青橙調
      o.r *= 1.15;
      o.b *= 0.9;

      // 2. 對比度提升
      o.rgb = (o.rgb - 0.5) * 1.25 + 0.5;

      // ✅ 3. 更強噪點：高頻 + RGB 偏移
      vec2 noiseUV = uv0 * resolution * 1.5 + time * 5.0; // 更高頻、動態
      float grainR = random(noiseUV + vec2(0.1, 0.2));
      float grainG = random(noiseUV + vec2(1.3, 3.1));
      float grainB = random(noiseUV + vec2(2.7, 1.8));
      vec3 grain = vec3(grainR, grainG, grainB) * 0.08 - 0.04; // [-0.04, +0.04]
      o.rgb += grain;

      // ✅ 4. 暗角
      float dist = distance(uv0, vec2(0.5));
      float vignette = smoothstep(0.85, 0.4, dist);
      o.rgb *= vignette;

      // 5. 灰階（保留原本功能）
      float gray = dot(o.rgb, vec3(0.2126, 0.7152, 0.0722));
      o.rgb = mix(o.rgb, vec3(gray), grayEffect);

      // float gray = dot(o.rgb, vec3(0.2126, 0.7152, 0.0722));
      // o.rgb = mix(o.rgb, vec3(gray), grayEffect);
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
